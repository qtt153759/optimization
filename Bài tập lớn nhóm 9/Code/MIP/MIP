{"cells":[{"cell_type":"code","execution_count":1,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":83566,"status":"ok","timestamp":1658305174509,"user":{"displayName":"Trần Anh Vương","userId":"04955020330253726116"},"user_tz":-420},"id":"qYeuOEyD3hXX","outputId":"35a156f7-fe01-4c56-f4a3-1760d9d7e248"},"outputs":[{"name":"stdout","output_type":"stream","text":["Mounted at /content/drive\n"]}],"source":["from google.colab import drive\n","drive.mount('/content/drive')"]},{"cell_type":"code","execution_count":4,"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"elapsed":3583,"status":"ok","timestamp":1658305198410,"user":{"displayName":"Trần Anh Vương","userId":"04955020330253726116"},"user_tz":-420},"id":"_0l3foDjfTxj","outputId":"6daafa2a-08dd-4165-ff2c-53d817fa7a30"},"outputs":[{"name":"stdout","output_type":"stream","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: ortools in /usr/local/lib/python3.7/dist-packages (9.3.10497)\n","Requirement already satisfied: numpy\u003e=1.13.3 in /usr/local/lib/python3.7/dist-packages (from ortools) (1.21.6)\n","Requirement already satisfied: protobuf\u003e=3.19.4 in /usr/local/lib/python3.7/dist-packages (from ortools) (4.21.2)\n","Requirement already satisfied: absl-py\u003e=0.13 in /usr/local/lib/python3.7/dist-packages (from ortools) (1.1.0)\n"]}],"source":["!pip install ortools"]},{"cell_type":"code","execution_count":null,"metadata":{"colab":{"background_save":true,"base_uri":"https://localhost:8080/"},"id":"shq42kApfX5S"},"outputs":[{"name":"stdout","output_type":"stream","text":["/content/drive/MyDrive/Colab Notebooks/TULKH/DATA/data12.txt\n","n =  12\n","c =  [[0, 745, 665, 929, 605, 521, 370, 587, 467, 670, 700, 1210], [745, 0, 80, 337, 1090, 315, 567, 712, 871, 741, 1420, 1630], [665, 80, 0, 380, 1020, 257, 501, 664, 808, 697, 1340, 1570], [929, 337, 380, 0, 1380, 408, 622, 646, 878, 732, 1520, 1530], [605, 1090, 1020, 1380, 0, 1010, 957, 1190, 1060, 1270, 966, 1720], [521, 315, 257, 408, 1010, 0, 253, 410, 557, 451, 1140, 1320], [370, 567, 501, 622, 957, 253, 0, 250, 311, 325, 897, 1090], [587, 712, 664, 646, 1190, 410, 250, 0, 260, 86, 939, 916], [467, 871, 808, 878, 1060, 557, 311, 260, 0, 328, 679, 794], [670, 741, 697, 732, 1270, 451, 325, 86, 328, 0, 1005, 905], [700, 1420, 1340, 1520, 966, 1140, 897, 939, 679, 1005, 0, 878], [1210, 1630, 1570, 1530, 1720, 1320, 1090, 916, 794, 905, 878, 0]]\n","Number of variables = 41472\n"]}],"source":["###### Bài tập lớn\n","#\n","######\n","\n","from ortools.linear_solver import pywraplp\n","from ortools.sat.python import cp_model as cp\n","from glob import glob\n","import os\n","import time\n","\n","\n","def gen_multidimensional_list(dimensions):\n","    assert(len(dimensions) \u003e 0)\n","    if len(dimensions) \u003e 1:\n","        return [gen_multidimensional_list(dimensions[1:]) for _ in range(dimensions[0])]\n","    else:\n","        return [0 for _ in range(dimensions[0])]\n","\n","def read_data(data_path):\n","    f = open(data_path)\n","    n = int(f.readline())\n","    c = [[] for _ in range(n)]\n","\n","    for i in range(n):\n","        c[i] = [int(x) for x in f.readline().strip().split(' ')]\n","\n","    return (n, c)\n","\n","\n","def main():\n","    for path in glob(\"/content/drive/MyDrive/Colab Notebooks/TULKH/DATA/*.txt\"):\n","        if 'result' in str(path):\n","            continue\n","        print(path)\n","        n, c = read_data(path)\n","        print('n = ', n)\n","        print('c = ', c)\n","        # Create the mip solver with the SCIP backend.\n","        solver = pywraplp.Solver.CreateSolver('SCIP')\n","\n","        X = gen_multidimensional_list([2 * n, n, n, n])\n","\n","        for slot in range(2 * n):\n","            for team in range(n):\n","                for fr in range(n):\n","                    for to in range(n):\n","                        X[slot][team][fr][to] = solver.IntVar(0, 1, f'X[{slot}][{team}][{fr}][{to}]')\n","\n","        print('Number of variables =', solver.NumVariables())\n","\n","        # Teams have to start at their homes\n","        # X[0][i][i][i] = 1\n","        for i in range(n):\n","            solver.Add(X[0][i][i][i] == 1)\n","\n","        # Each slot, each team only move once\n","        for team in range(n):\n","            constraint = solver.RowConstraint(1, 1, '')\n","            for j in range(n):\n","                constraint.SetCoefficient(X[1][team][team][j], 1)\n","\n","        for slot in range(2, 2 * n):\n","            for team in range(n):\n","                constraint = solver.RowConstraint(1, 1, '')\n","                for i in range(n):\n","                    for j in range(n):\n","                        constraint.SetCoefficient(X[slot][team][i][j], 1)\n","\n","        # Satisfying each round's condition\n","        for slot in range(1, 2 * n - 1):\n","            for to in range(n):\n","                constraint = solver.RowConstraint(0, 0, '')\n","                for i in range(n):\n","                    constraint.SetCoefficient(X[slot][to][i][to], 1)\n","                    if i == to:\n","                        continue\n","                    for j in range(n):\n","                        # if i != j:\n","                        constraint.SetCoefficient(X[slot][i][j][to], - 1)\n","\n","\n","        # Each team in each slot will move from a city to another city\n","        for slot in range(1, 2 * n - 1):\n","            for city in range(n):\n","                for team in range(n):\n","                    constraint = solver.RowConstraint(0, 0, '')\n","                    for i in range(n):\n","                        constraint.SetCoefficient(X[slot][team][i][city], 1)\n","                        constraint.SetCoefficient(X[slot + 1][team][city][i], -1)\n","\n","        for u in range(n):\n","            for v in range(n):\n","                if u == v:\n","                    continue\n","                constraint = solver.RowConstraint(1, 1, '')\n","                for slot in range(1, 2 * n - 1):\n","                    for i in range(n):\n","                        constraint.SetCoefficient(X[slot][u][i][v], 1)\n","\n","        ##################### Add constraint for first-leg rounds and second-leg rounds:\n","        for u in range(n):\n","            for v in range(n):\n","                if u == v:\n","                    continue\n","                constraint = solver.RowConstraint(1, 1, '')\n","                for slot in range(1, n):\n","                    for j in range(n):\n","                        constraint.SetCoefficient(X[slot][u][j][v], 1)\n","                        constraint.SetCoefficient(X[slot][v][j][u], 1)\n","        #####################\n","        for u in range(n):\n","            constraint = solver.RowConstraint(1, 1, '')\n","            for i in range(n):\n","                constraint.SetCoefficient(X[2 * n - 1][u][i][u], 1)\n","\n","        \n","\n","        print('Number of constraints =', solver.NumConstraints())\n","\n","        objective = solver.Objective()\n","        for slot in range(2 * n):\n","            for team in range(n):\n","                for fr in range(n):\n","                    for to in range(n):\n","                        objective.SetCoefficient(X[slot][team][fr][to], c[fr][to])\n","        objective.SetMinimization()\n","\n","        status = solver.Solve()\n","\n","        # print(solver.Objective().Value())\n","\n","\n","        if status == pywraplp.Solver.OPTIMAL or status == pywraplp.Solver.FEASIBLE:\n","            print('Objective value =', solver.Objective().Value())\n","\n","            for slot in range(2 * n):\n","                for team in range(n):\n","                    for i in range(n):\n","                        for j in range(n):\n","                            if X[slot][team][i][j].solution_value() == 1:\n","                                print(f'In round {slot}, team {team} move from {i} to {j}')\n","            \n","            for round in range(1, 2 * n - 1):\n","                cur = [0 for i in range(n)]\n","                for team in range(n):\n","                    for i in range(n):\n","                        for j in range(n):\n","                            if X[round][team][i][j].solution_value() == 1:\n","                                cur[team] = j\n","                opp = [0 for i in range(n)]\n","                for team in range(n):\n","                    if team != cur[team]:\n","                        print(f'({cur[team]}, {team})', end=' ')\n","                \n","\n","            print('Problem solved in %f milliseconds' % solver.wall_time())\n","            print('Problem solved in %d iterations' % solver.iterations())\n","            print('Problem solved in %d branch-and-bound nodes' % solver.nodes())\n","            data_dir, file_name = os.path.split(path)\n","            with open(os.path.join(data_dir, \"mip_result.txt\"), \"a\") as f:\n","                f.write(\"File: {} - Duration: {:.0f} seconds  -  Objective value: {}\".format(file_name, solver.wall_time()/1000, solver.Objective().Value()))\n","                f.write(\"\\n\")\n","        else:\n","            print('The problem does not have an optimal solution.')\n","\n","\n","if __name__ == '__main__':\n","    main()"]}],"metadata":{"colab":{"authorship_tag":"ABX9TyMaJq8sYCbb7TVax0gKN2jR","collapsed_sections":[],"name":"MIP","version":""},"kernelspec":{"display_name":"Python 3","name":"python3"},"language_info":{"name":"python"}},"nbformat":4,"nbformat_minor":0}